"use strict";
const fs = require("fs");
const async = require("async");
const path = require("path");
let term;
let limit;
let threshold;
let folders;
let results = [];
// let traversedFolders = [];
process.on("message", (data) => {
    term = data.term.split("").reverse().join("").toLowerCase();
    limit = data.limit;
    threshold = data.threshold || 0;
    folders = data.folders.filter((f, idx, arr) => arr.indexOf(f) === idx);
    const promises = folders.map(folder => new Promise((resolve, reject) => {
        recurseFolder(folder, (err) => {
            if (err) {
                return reject(err);
            }
            resolve(null);
        });
    }));
    Promise.all(promises).then(_ => {
        process.send({
            success: true,
            results: results.sort((a, b) => b.relevance - a.relevance).slice(0, limit)
        });
    });
});
function terminate(err) {
    process.send({
        success: false,
        err
    });
}
function fuzzysearch(needle, haystack) {
    const noSpaceNeedle = needle.replace(/ /g, "");
    const hlen = haystack.length;
    const nlen = noSpaceNeedle.length;
    if (nlen > hlen) {
        return 0;
    }
    if (nlen === hlen) {
        return 1;
    }
    let matchedCharacters = 0;
    let spacings = [];
    let previousFoundIndex = 0;
    outer: for (let i = 0, j = 0; i < nlen; i++) {
        let nch = noSpaceNeedle.charCodeAt(i);
        while (j < hlen) {
            if (haystack.charCodeAt(j++) === nch) {
                spacings.push(j - previousFoundIndex);
                previousFoundIndex = j;
                matchedCharacters++;
                continue outer;
            }
        }
        return 0;
    }
    let totalDistance = spacings.reduce((acc, n) => acc + n, 0);
    let adjacencyBonus = haystack.length / (totalDistance * (haystack.length / spacings.length));
    let indexBonus = needle.split(" ").map(word => haystack.indexOf(word)).reduce((acc, idx) => acc + Number(idx !== -1), 0);
    let bonus = adjacencyBonus + indexBonus;
    return bonus + matchedCharacters / hlen;
}
function getRelevance(strPath) {
    if (!(strPath.endsWith(".yaml")
        || strPath.endsWith(".json")
        || strPath.endsWith(".yml")
        || strPath.endsWith(".cwl"))) {
        return 0;
    }
    return fuzzysearch(term, strPath.split("").reverse().join("").toLowerCase());
}
function recurseFolder(folderPath, folderTraversed) {
    // if (traversedFolders.indexOf(folderPath) !== -1) {
    //     return folderTraversed(null);
    // }
    fs.readdir(folderPath, (err, files) => {
        // traversedFolders.push(folderPath);
        if (err) {
            folderTraversed(err);
            return terminate(err);
        }
        if (!files) {
            return folderTraversed(null);
        }
        async.each(files, (filepath, fileRead) => {
            let strPath;
            try {
                strPath = path.join(folderPath, filepath);
            }
            catch (e) {
                return fileRead(null);
            }
            fs.lstat(strPath, (err, stat) => {
                if (err || !stat) {
                    return fileRead(null);
                }
                const relevance = getRelevance(strPath);
                if (relevance > threshold) {
                    results.push({
                        path: strPath,
                        relevance
                    });
                }
                if (stat.isDirectory()) {
                    recurseFolder(strPath, (err) => {
                        return fileRead(null);
                    });
                }
                else {
                    return fileRead(null);
                }
            });
        }, (err) => {
            if (err) {
                return folderTraversed(err);
            }
            folderTraversed(null);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93b3JrZXJzL3NlYXJjaC13b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlCQUF5QjtBQUN6QiwrQkFBK0I7QUFDL0IsNkJBQTZCO0FBRTdCLElBQUksSUFBWSxDQUFDO0FBQ2pCLElBQUksS0FBYSxDQUFDO0FBQ2xCLElBQUksU0FBaUIsQ0FBQztBQUN0QixJQUFJLE9BQWlCLENBQUM7QUFDdEIsSUFBSSxPQUFPLEdBQVUsRUFBRSxDQUFDO0FBQ3hCLDZCQUE2QjtBQUU3QixPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQTJFO0lBRTlGLElBQUksR0FBUSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakUsS0FBSyxHQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdkIsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO0lBQ2hDLE9BQU8sR0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFFekUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtRQUMvRCxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRztZQUN0QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsQ0FBQztZQUNELE9BQU8s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